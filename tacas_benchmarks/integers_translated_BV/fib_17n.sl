(set-logic ALL)
(declare-var k (_ BitVec 32))
(declare-var i (_ BitVec 32))
(declare-var j (_ BitVec 32))
(declare-var n (_ BitVec 32))
(declare-var turn (_ BitVec 32))
(declare-var k! (_ BitVec 32))
(declare-var i! (_ BitVec 32))
(declare-var j! (_ BitVec 32))
(declare-var n! (_ BitVec 32))
(declare-var turn! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32)))Bool) 
(constraint (=> (and (= k (_ bv1 32)) (and (= i (_ bv1 32)) (and (= j (_ bv0 32)) (= turn (_ bv0 32)) ) ) )(inv-f k i j n turn )))
(constraint (=> (and (inv-f k i j n turn ) (or (and (= turn (_ bv0 32)) (and (bvult i n) (and (= k! k) (and (= i! i) (and (= j! (_ bv0 32)) (and (= n! n) (= turn! (_ bv1 32)) ) ) ) ) ) ) (or (and (= turn (_ bv0 32)) (and (bvuge i n) (and (= k! k) (and (= i! i) (and (= j! j) (and (= n! n) (= turn! (_ bv3 32)) ) ) ) ) ) ) (or (and (= turn (_ bv1 32)) (and (bvult j i) (and (= k! (bvsub (bvadd k i) j)) (and (= i! i) (and (= j! (bvadd j (_ bv1 32))) (and (= n! n) (= turn! turn) ) ) ) ) ) ) (or (and (= turn (_ bv1 32)) (and (bvuge j i) (and (= k! k) (and (= i! i) (and (= j! j) (and (= n! n) (= turn! (_ bv2 32)) ) ) ) ) ) ) (or (and (= turn (_ bv2 32)) (and (= k! k) (and (= i! (bvadd i (_ bv1 32))) (and (= j! j) (and (= n! n) (= turn! (_ bv0 32)) ) ) ) ) ) (or (and (bvuge turn (_ bv3 32)) (and (= k! k) (and (= i! i) (and (= j! j) (and (= n! n) (= turn! turn) ) ) ) ) ) (and (bvult turn (_ bv0 32)) (and (= k! k) (and (= i! i) (and (= j! j) (and (= n! n) (= turn! turn) ) ) ) ) ) ) ) ) ) ) ) )(inv-f k! i! j! n! turn! )))
(constraint (=> (inv-f k i j n turn )(=> (= turn (_ bv3 32))(bvuge k n))))
(check-synth)

