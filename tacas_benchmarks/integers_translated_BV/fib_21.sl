(set-logic ALL)
(declare-var i (_ BitVec 32))
(declare-var j (_ BitVec 32))
(declare-var k (_ BitVec 32))
(declare-var c1 (_ BitVec 32))
(declare-var c2 (_ BitVec 32))
(declare-var n (_ BitVec 32))
(declare-var v (_ BitVec 32))
(declare-var i! (_ BitVec 32))
(declare-var j! (_ BitVec 32))
(declare-var k! (_ BitVec 32))
(declare-var c1! (_ BitVec 32))
(declare-var c2! (_ BitVec 32))
(declare-var n! (_ BitVec 32))
(declare-var v! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32))(parameter6 (_ BitVec 32)))Bool) 
(constraint (=> (and (bvugt n (_ bv0 32)) (and (bvult n (_ bv10 32)) (and (= k (_ bv0 32)) (and (= i (_ bv0 32)) (and (= c1 (_ bv4000 32)) (= c2 (_ bv2000 32)) ) ) ) ) )(inv-f i j k c1 c2 n v )))
(constraint (=> (and (inv-f i j k c1 c2 n v ) (or (and (bvuge i n) (and (= i! i) (and (= j! j) (and (= k! k) (and (= c1! c1) (and (= c2! c2) (and (= n! n) (= v! v) ) ) ) ) ) ) ) (or (and (bvult i n) (and (= i! (bvadd i (_ bv1 32))) (and (= j! j) (and (= k! (bvadd k c1)) (and (= c1! c1) (and (= c2! c2) (and (= n! n) (= v! (_ bv0 32)) ) ) ) ) ) ) ) (and (bvult i n) (and (= i! (bvadd i (_ bv1 32))) (and (= j! j) (and (= k! (bvadd k c2)) (and (= c1! c1) (and (= c2! c2) (and (= n! n) (= v! (_ bv1 32)) ) ) ) ) ) ) ) ) ) )(inv-f i! j! k! c1! c2! n! v! )))
(constraint (=> (inv-f i j k c1 c2 n v )(=> (bvuge i n)(bvugt k n))))
(check-synth)

