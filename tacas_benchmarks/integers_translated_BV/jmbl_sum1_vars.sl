(set-logic ALL)
(declare-var i (_ BitVec 32))
(declare-var n (_ BitVec 32))
(declare-var sn (_ BitVec 32))
(declare-var v1 (_ BitVec 32))
(declare-var v2 (_ BitVec 32))
(declare-var v3 (_ BitVec 32))
(declare-var i! (_ BitVec 32))
(declare-var n! (_ BitVec 32))
(declare-var sn! (_ BitVec 32))
(declare-var v1! (_ BitVec 32))
(declare-var v2! (_ BitVec 32))
(declare-var v3! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32)))Bool) 
(constraint (=> (and (= sn (_ bv0 32)) (= i (_ bv1 32)) )(inv-f i n sn v1 v2 v3 )))
(constraint (=> (and (inv-f i n sn v1 v2 v3 ) (and (= n! n) (and (= i! (bvadd i (_ bv1 32))) (and (bvule i n) (= sn! (bvadd sn (_ bv1 32))) ) ) ) )(inv-f i! n! sn! v1! v2! v3! )))
(constraint (=> (inv-f i n sn v1 v2 v3 )(or (bvule i n) (or (= sn n) (= sn (_ bv0 32)) ) )))
(check-synth)

