(set-logic ALL)
(declare-var a (_ BitVec 32))
(declare-var a! (_ BitVec 32))
(declare-var j (_ BitVec 32))
(declare-var j! (_ BitVec 32))
(declare-var k (_ BitVec 32))
(declare-var k! (_ BitVec 32))
(declare-var m (_ BitVec 32))
(declare-var m! (_ BitVec 32))
(declare-var a_0 (_ BitVec 32))
(declare-var a_0! (_ BitVec 32))
(declare-var j_0 (_ BitVec 32))
(declare-var j_0! (_ BitVec 32))
(declare-var k_0 (_ BitVec 32))
(declare-var k_0! (_ BitVec 32))
(declare-var k_1 (_ BitVec 32))
(declare-var k_1! (_ BitVec 32))
(declare-var k_2 (_ BitVec 32))
(declare-var k_2! (_ BitVec 32))
(declare-var k_3 (_ BitVec 32))
(declare-var k_3! (_ BitVec 32))
(declare-var m_0 (_ BitVec 32))
(declare-var m_0! (_ BitVec 32))
(declare-var m_1 (_ BitVec 32))
(declare-var m_1! (_ BitVec 32))
(declare-var m_2 (_ BitVec 32))
(declare-var m_2! (_ BitVec 32))
(declare-var m_3 (_ BitVec 32))
(declare-var m_3! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32))(parameter6 (_ BitVec 32))(parameter7 (_ BitVec 32))(parameter8 (_ BitVec 32))(parameter9 (_ BitVec 32))(parameter10 (_ BitVec 32))(parameter11 (_ BitVec 32))(parameter12 (_ BitVec 32))(parameter13 (_ BitVec 32)))Bool) 
(constraint (=> (and (and (and (and (and (and (= a a_0) (= j j_0) ) (= k k_1) ) (= m m_0) ) (bvule a_0 m_0) ) (bvult j_0 (_ bv1 32)) ) (= k_1 (_ bv0 32)) )(inv-f a j k m a_0 j_0 k_0 k_1 k_2 k_3 m_0 m_1 m_2 m_3 )))
(constraint (=> (and (inv-f a j k m a_0 j_0 k_0 k_1 k_2 k_3 m_0 m_1 m_2 m_3 ) (or (or (and (and (and (and (and (and (= k_2 k) (= m_1 m) ) (= k_2 k!) ) (= m_1 m!) ) (= a a!) ) (= j j!) ) (= m m!) ) (and (and (and (and (and (and (and (and (and (and (and (and (= k_2 k) (= m_1 m) ) (bvult k_2 (_ bv1 32)) ) (bvult m_1 a_0) ) (= m_2 a_0) ) (= m_3 m_2) ) (= k_3 (bvadd k_2 (_ bv1 32))) ) (= k_3 k!) ) (= m_3 m!) ) (= a a_0) ) (= a! a_0) ) (= j j_0) ) (= j! j_0) ) ) (and (and (and (and (and (and (and (and (and (and (and (= k_2 k) (= m_1 m) ) (bvult k_2 (_ bv1 32)) ) (not (bvult m_1 a_0)) ) (= m_3 m_1) ) (= k_3 (bvadd k_2 (_ bv1 32))) ) (= k_3 k!) ) (= m_3 m!) ) (= a a_0) ) (= a! a_0) ) (= j j_0) ) (= j! j_0) ) ) )(inv-f a! j! k! m! a_0! j_0! k_0! k_1! k_2! k_3! m_0! m_1! m_2! m_3! )))
(constraint (=> (inv-f a j k m a_0 j_0 k_0 k_1 k_2 k_3 m_0 m_1 m_2 m_3 )(or (not (and (and (and (= a a_0) (= j j_0) ) (= k k_2) ) (= m m_1) )) (not (and (not (bvult k_2 (_ bv1 32))) (not (bvuge a_0 m_1)) )) )))
(check-synth)

