(set-logic ALL)
(declare-var size (_ BitVec 32))
(declare-var x (_ BitVec 32))
(declare-var y (_ BitVec 32))
(declare-var z (_ BitVec 32))
(declare-var v1 (_ BitVec 32))
(declare-var v2 (_ BitVec 32))
(declare-var v3 (_ BitVec 32))
(declare-var x! (_ BitVec 32))
(declare-var y! (_ BitVec 32))
(declare-var z! (_ BitVec 32))
(declare-var v1! (_ BitVec 32))
(declare-var v2! (_ BitVec 32))
(declare-var v3! (_ BitVec 32))
(declare-var size! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32))(parameter6 (_ BitVec 32)))Bool) 
(constraint (=> (= x (_ bv0 32))(inv-f x y z v1 v2 v3 size )))
(constraint (=> (and (inv-f x y z v1 v2 v3 size ) (or (and (= x! (bvadd x (_ bv1 32))) (and (= y! z!) (and (bvule z! y) (bvult x size) ) ) ) (and (= x! (bvadd x (_ bv1 32))) (and (= y! y) (and (bvugt z! y) (bvult x size) ) ) ) ) )(inv-f x! y! z! v1! v2! v3! size! )))
(constraint (=> (inv-f x y z v1 v2 v3 size )(not (and (and (bvuge x size) (bvult z y) ) (bvugt size (_ bv0 32)) ))))
(check-synth)

