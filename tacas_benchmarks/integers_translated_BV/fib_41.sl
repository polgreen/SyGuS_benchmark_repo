(set-logic ALL)
(declare-var n (_ BitVec 32))
(declare-var k (_ BitVec 32))
(declare-var i (_ BitVec 32))
(declare-var j (_ BitVec 32))
(declare-var n! (_ BitVec 32))
(declare-var k! (_ BitVec 32))
(declare-var i! (_ BitVec 32))
(declare-var j! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32)))Bool) 
(constraint (=> (and (= j (_ bv0 32)) (and (bvuge n (_ bv0 32)) (and (= i (_ bv0 32)) (or (= k (_ bv1 32)) (bvuge k (_ bv0 32)) ) ) ) )(inv-f n k i j )))
(constraint (=> (and (inv-f n k i j ) (or (and (bvugt i n) (and (= n! n) (and (= k! k) (and (= i! i) (= j! j) ) ) ) ) (and (bvule i n) (and (= n! n) (and (= k! k) (and (= i! (bvadd i (_ bv1 32))) (= j! (bvadd j (_ bv1 32))) ) ) ) ) ) )(inv-f n! k! i! j! )))
(constraint (=> (inv-f n k i j )(=> (bvugt i n)(bvugt (bvadd k (bvadd i j)) (bvmul (_ bv2 32) n)))))
(check-synth)

