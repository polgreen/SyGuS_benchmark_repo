(set-logic LIA)
(declare-var c Int)
(declare-var c! Int)
(declare-var y Int)
(declare-var y! Int)
(declare-var z Int)
(declare-var z! Int)
(declare-var tmp Int)
(declare-var tmp! Int)
(declare-var c_0 Int)
(declare-var c_0! Int)
(declare-var c_1 Int)
(declare-var c_1! Int)
(declare-var c_2 Int)
(declare-var c_2! Int)
(declare-var c_3 Int)
(declare-var c_3! Int)
(declare-var c_4 Int)
(declare-var c_4! Int)
(declare-var y_0 Int)
(declare-var y_0! Int)
(declare-var z_0 Int)
(declare-var z_0! Int)
(declare-var z_1 Int)
(declare-var z_1! Int)
(declare-var z_2 Int)
(declare-var z_2! Int)
(declare-var z_3 Int)
(declare-var z_3! Int)
(declare-var z_4 Int)
(declare-var z_4! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int)(parameter11 Int)(parameter12 Int)(parameter13 Int)(parameter14 Int))Bool) 
(constraint (=> (and (= c c_1) (= y y_0) (= z z_1) (= c_1 0) (>= y_0 0) (>= y_0 127) (= z_1 (* 36 y_0)) )(inv-f c y z tmp c_0 c_1 c_2 c_3 c_4 y_0 z_0 z_1 z_2 z_3 z_4 )))
(constraint (=> (and (inv-f c y z tmp c_0 c_1 c_2 c_3 c_4 y_0 z_0 z_1 z_2 z_3 z_4 ) (or (and (= c_2 c) (= z_2 z) (= c_2 c!) (= z_2 z!) (= c c!) (= y y!) (= z z!) (= tmp tmp!) ) (and (= c_2 c) (= z_2 z) (< c_2 36) (= z_3 (+ z_2 1 )) (= c_3 (+ c_2 1 )) (= c_4 c_3) (= z_4 z_3) (= c_4 c!) (= z_4 z!) (= y y_0) (= y! y_0) (= tmp tmp!) ) (and (= c_2 c) (= z_2 z) (not (< c_2 36)) (= c_4 c_2) (= z_4 z_2) (= c_4 c!) (= z_4 z!) (= y y_0) (= y! y_0) (= tmp tmp!) ) ) )(inv-f c! y! z! tmp! c_0! c_1! c_2! c_3! c_4! y_0! z_0! z_1! z_2! z_3! z_4! )))
(constraint (=> (inv-f c y z tmp c_0 c_1 c_2 c_3 c_4 y_0 z_0 z_1 z_2 z_3 z_4 )(or (not (and (= c c_2) (= y y_0) (= z z_2) )) (not (and (< c_2 36) (not (< z_2 4608)) )) )))
(check-synth)

