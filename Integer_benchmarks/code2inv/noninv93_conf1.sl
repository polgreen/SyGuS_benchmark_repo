(set-logic LIA)
(declare-var i Int)
(declare-var i! Int)
(declare-var conf_0 Int)
(declare-var conf_0! Int)
(declare-var n Int)
(declare-var n! Int)
(declare-var x Int)
(declare-var x! Int)
(declare-var y Int)
(declare-var y! Int)
(declare-var tmp Int)
(declare-var tmp! Int)
(declare-var i_0 Int)
(declare-var i_0! Int)
(declare-var i_1 Int)
(declare-var i_1! Int)
(declare-var i_2 Int)
(declare-var i_2! Int)
(declare-var i_3 Int)
(declare-var i_3! Int)
(declare-var conf_0_0 Int)
(declare-var conf_0_0! Int)
(declare-var conf_0_1 Int)
(declare-var conf_0_1! Int)
(declare-var conf_0_2 Int)
(declare-var conf_0_2! Int)
(declare-var conf_0_3 Int)
(declare-var conf_0_3! Int)
(declare-var conf_0_4 Int)
(declare-var conf_0_4! Int)
(declare-var conf_0_5 Int)
(declare-var conf_0_5! Int)
(declare-var conf_0_6 Int)
(declare-var conf_0_6! Int)
(declare-var conf_0_7 Int)
(declare-var conf_0_7! Int)
(declare-var n_0 Int)
(declare-var n_0! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var x_1 Int)
(declare-var x_1! Int)
(declare-var x_2 Int)
(declare-var x_2! Int)
(declare-var x_3 Int)
(declare-var x_3! Int)
(declare-var x_4 Int)
(declare-var x_4! Int)
(declare-var x_5 Int)
(declare-var x_5! Int)
(declare-var y_0 Int)
(declare-var y_0! Int)
(declare-var y_1 Int)
(declare-var y_1! Int)
(declare-var y_2 Int)
(declare-var y_2! Int)
(declare-var y_3 Int)
(declare-var y_3! Int)
(declare-var y_4 Int)
(declare-var y_4! Int)
(declare-var y_5 Int)
(declare-var y_5! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int)(parameter11 Int)(parameter12 Int)(parameter13 Int)(parameter14 Int)(parameter15 Int)(parameter16 Int)(parameter17 Int)(parameter18 Int)(parameter19 Int)(parameter20 Int)(parameter21 Int)(parameter22 Int)(parameter23 Int)(parameter24 Int)(parameter25 Int)(parameter26 Int)(parameter27 Int)(parameter28 Int)(parameter29 Int)(parameter30 Int))Bool) 
(constraint (=> (and (= i i_1) (= conf_0 conf_0_0) (= n n_0) (= x x_1) (= y y_1) (= conf_0_0 3) (>= n_0 0) (= i_1 0) (= x_1 0) (= y_1 0) )(inv-f i conf_0 n x y tmp i_0 i_1 i_2 i_3 conf_0_0 conf_0_1 conf_0_2 conf_0_3 conf_0_4 conf_0_5 conf_0_6 conf_0_7 n_0 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 y_4 y_5 )))
(constraint (=> (and (inv-f i conf_0 n x y tmp i_0 i_1 i_2 i_3 conf_0_0 conf_0_1 conf_0_2 conf_0_3 conf_0_4 conf_0_5 conf_0_6 conf_0_7 n_0 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 y_4 y_5 ) (or (and (= i_2 i) (= conf_0_1 conf_0) (= x_2 x) (= y_2 y) (= i_2 i!) (= conf_0_1 conf_0!) (= x_2 x!) (= y_2 y!) (= n n_0) (= n! n_0) (= conf_0 conf_0!) (= x x!) (= y y!) (= tmp tmp!) ) (and (= i_2 i) (= conf_0_1 conf_0) (= x_2 x) (= y_2 y) (< i_2 n_0) (= i_3 (+ i_2 1 )) (= conf_0_2 (- 948 conf_0_1)) (= x_3 (+ x_2 1 )) (= conf_0_3 (- conf_0_2 conf_0_2)) (= y_3 (+ y_2 2 )) (= conf_0_4 conf_0_3) (= conf_0_5 conf_0_4) (= x_4 x_3) (= y_4 y_3) (= i_3 i!) (= conf_0_5 conf_0!) (= x_4 x!) (= y_4 y!) (= n n_0) (= n! n_0) (= tmp tmp!) ) (and (= i_2 i) (= conf_0_1 conf_0) (= x_2 x) (= y_2 y) (< i_2 n_0) (= i_3 (+ i_2 1 )) (= conf_0_2 (- 948 conf_0_1)) (= x_5 (+ x_2 2 )) (= conf_0_6 918) (= y_5 (+ y_2 1 )) (= conf_0_7 (+ 607 185 )) (= conf_0_5 conf_0_7) (= x_4 x_5) (= y_4 y_5) (= i_3 i!) (= conf_0_5 conf_0!) (= x_4 x!) (= y_4 y!) (= n n_0) (= n! n_0) (= tmp tmp!) ) ) )(inv-f i! conf_0! n! x! y! tmp! i_0! i_1! i_2! i_3! conf_0_0! conf_0_1! conf_0_2! conf_0_3! conf_0_4! conf_0_5! conf_0_6! conf_0_7! n_0! x_0! x_1! x_2! x_3! x_4! x_5! y_0! y_1! y_2! y_3! y_4! y_5! )))
(constraint (=> (inv-f i conf_0 n x y tmp i_0 i_1 i_2 i_3 conf_0_0 conf_0_1 conf_0_2 conf_0_3 conf_0_4 conf_0_5 conf_0_6 conf_0_7 n_0 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 y_4 y_5 )(or (not (and (= i i_2) (= conf_0 conf_0_1) (= n n_0) (= x x_2) (= y y_2) )) (not (and (not (< i_2 n_0)) (not (= (* 3 n_0) (+ x_2 y_2 ))) )) )))
(check-synth)

