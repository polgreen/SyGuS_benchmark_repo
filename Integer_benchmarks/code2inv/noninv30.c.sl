(set-logic LIA)
(declare-var x Int)
(declare-var x! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var x_1 Int)
(declare-var x_1! Int)
(declare-var x_2 Int)
(declare-var x_2! Int)
(declare-var x_3 Int)
(declare-var x_3! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int))Bool) 
(constraint (=> (and (= x x_1) (= x_1 100) )(inv-f x x_0 x_1 x_2 x_3 )))
(constraint (=> (and (inv-f x x_0 x_1 x_2 x_3 ) (or (and (= x_2 x) (= x_2 x!) ) (and (= x_2 x) (> x_2 0) (= x_3 (- x_2 1)) (= x_3 x!) ) ) )(inv-f x! x_0! x_1! x_2! x_3! )))
(constraint (=> (inv-f x x_0 x_1 x_2 x_3 )(or (not (= x x_2)) (not (and (not (> x_2 0)) (not (= x_2 0)) )) )))
(check-synth)

