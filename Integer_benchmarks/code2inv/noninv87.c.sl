(set-logic LIA)
(declare-var lock Int)
(declare-var lock! Int)
(declare-var x Int)
(declare-var x! Int)
(declare-var y Int)
(declare-var y! Int)
(declare-var tmp Int)
(declare-var tmp! Int)
(declare-var lock_0 Int)
(declare-var lock_0! Int)
(declare-var lock_1 Int)
(declare-var lock_1! Int)
(declare-var lock_2 Int)
(declare-var lock_2! Int)
(declare-var lock_3 Int)
(declare-var lock_3! Int)
(declare-var lock_4 Int)
(declare-var lock_4! Int)
(declare-var lock_5 Int)
(declare-var lock_5! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var x_1 Int)
(declare-var x_1! Int)
(declare-var x_2 Int)
(declare-var x_2! Int)
(declare-var x_3 Int)
(declare-var x_3! Int)
(declare-var x_4 Int)
(declare-var x_4! Int)
(declare-var x_5 Int)
(declare-var x_5! Int)
(declare-var y_0 Int)
(declare-var y_0! Int)
(declare-var y_1 Int)
(declare-var y_1! Int)
(declare-var y_2 Int)
(declare-var y_2! Int)
(declare-var y_3 Int)
(declare-var y_3! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int)(parameter11 Int)(parameter12 Int)(parameter13 Int)(parameter14 Int)(parameter15 Int)(parameter16 Int)(parameter17 Int)(parameter18 Int)(parameter19 Int))Bool) 
(constraint (=> (and (= lock lock_1) (= x x_1) (= y y_0) (= x_1 y_0) (= lock_1 1) )(inv-f lock x y tmp lock_0 lock_1 lock_2 lock_3 lock_4 lock_5 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 )))
(constraint (=> (and (inv-f lock x y tmp lock_0 lock_1 lock_2 lock_3 lock_4 lock_5 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 ) (or (and (= lock_2 lock) (= x_2 x) (= y_1 y) (= lock_2 lock!) (= x_2 x!) (= y_1 y!) (= lock lock!) (= tmp tmp!) ) (and (= lock_2 lock) (= x_2 x) (= y_1 y) (not (= x_2 y_1)) (= lock_3 1) (= x_3 y_1) (= lock_4 lock_3) (= x_4 x_3) (= y_2 y_1) (= lock_4 lock!) (= x_4 x!) (= y_2 y!) (= tmp tmp!) ) (and (= lock_2 lock) (= x_2 x) (= y_1 y) (not (= x_2 y_1)) (= lock_5 0) (= x_5 y_1) (= y_3 (+ y_1 1 )) (= lock_4 lock_5) (= x_4 x_5) (= y_2 y_3) (= lock_4 lock!) (= x_4 x!) (= y_2 y!) (= tmp tmp!) ) ) )(inv-f lock! x! y! tmp! lock_0! lock_1! lock_2! lock_3! lock_4! lock_5! x_0! x_1! x_2! x_3! x_4! x_5! y_0! y_1! y_2! y_3! )))
(constraint (=> (inv-f lock x y tmp lock_0 lock_1 lock_2 lock_3 lock_4 lock_5 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 )(or (not (and (= lock lock_2) (= x x_2) (= y y_1) )) (not (and (not (not (= x_2 y_1))) (not (= lock_2 1)) )) )))
(check-synth)

