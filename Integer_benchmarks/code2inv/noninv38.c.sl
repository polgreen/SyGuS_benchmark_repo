(set-logic LIA)
(declare-var c Int)
(declare-var c! Int)
(declare-var n Int)
(declare-var n! Int)
(declare-var tmp Int)
(declare-var tmp! Int)
(declare-var c_0 Int)
(declare-var c_0! Int)
(declare-var c_1 Int)
(declare-var c_1! Int)
(declare-var c_2 Int)
(declare-var c_2! Int)
(declare-var c_3 Int)
(declare-var c_3! Int)
(declare-var c_4 Int)
(declare-var c_4! Int)
(declare-var n_0 Int)
(declare-var n_0! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int))Bool) 
(constraint (=> (and (= c c_0) (= n n_0) (= c_0 0) (> n_0 0) )(inv-f c n tmp c_0 c_1 c_2 c_3 c_4 n_0 )))
(constraint (=> (and (inv-f c n tmp c_0 c_1 c_2 c_3 c_4 n_0 ) (or (and (= c_1 c) (= c_1 c!) (= c c!) (= n n!) (= tmp tmp!) ) (and (= c_1 c) (= c_1 n_0) (= c_2 1) (= c_3 c_2) (= c_3 c!) (= n n_0) (= n! n_0) (= tmp tmp!) ) (and (= c_1 c) (not (= c_1 n_0)) (= c_4 (+ c_1 1 )) (= c_3 c_4) (= c_3 c!) (= n n_0) (= n! n_0) (= tmp tmp!) ) ) )(inv-f c! n! tmp! c_0! c_1! c_2! c_3! c_4! n_0! )))
(constraint (=> (inv-f c n tmp c_0 c_1 c_2 c_3 c_4 n_0 )(or (not (and (= c c_1) (= n n_0) )) (not (and (= c_1 n_0) (not (>= c_1 0)) )) )))
(check-synth)

