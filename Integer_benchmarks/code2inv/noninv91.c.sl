(set-logic LIA)
(declare-var x Int)
(declare-var x! Int)
(declare-var y Int)
(declare-var y! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var y_0 Int)
(declare-var y_0! Int)
(declare-var y_1 Int)
(declare-var y_1! Int)
(declare-var y_2 Int)
(declare-var y_2! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int))Bool) 
(constraint (=> (and (= x x_0) (= y y_0) (= x_0 0) (= y_0 0) )(inv-f x y x_0 y_0 y_1 y_2 )))
(constraint (=> (and (inv-f x y x_0 y_0 y_1 y_2 ) (or (and (= y_1 y) (= y_1 y!) (= x x!) ) (and (= y_1 y) (>= y_1 0) (= y_2 (+ y_1 x_0 )) (= y_2 y!) (= x x_0) (= x! x_0) ) ) )(inv-f x! y! x_0! y_0! y_1! y_2! )))
(constraint (=> (inv-f x y x_0 y_0 y_1 y_2 )(or (not (and (= x x_0) (= y y_1) )) (not (and (not (>= y_1 0)) (not (>= y_1 0)) )) )))
(check-synth)

