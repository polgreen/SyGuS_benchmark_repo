(set-logic LIA)
(declare-var i Int)
(declare-var i! Int)
(declare-var j Int)
(declare-var j! Int)
(declare-var i_0 Int)
(declare-var i_0! Int)
(declare-var i_1 Int)
(declare-var i_1! Int)
(declare-var i_2 Int)
(declare-var i_2! Int)
(declare-var i_3 Int)
(declare-var i_3! Int)
(declare-var j_0 Int)
(declare-var j_0! Int)
(declare-var j_1 Int)
(declare-var j_1! Int)
(declare-var j_2 Int)
(declare-var j_2! Int)
(declare-var j_3 Int)
(declare-var j_3! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int))Bool) 
(constraint (=> (and (= i i_1) (= j j_1) (= i_1 1) (= j_1 10) )(inv-f i j i_0 i_1 i_2 i_3 j_0 j_1 j_2 j_3 )))
(constraint (=> (and (inv-f i j i_0 i_1 i_2 i_3 j_0 j_1 j_2 j_3 ) (or (and (= i_2 i) (= j_2 j) (= i_2 i!) (= j_2 j!) ) (and (= i_2 i) (= j_2 j) (>= j_2 i_2) (= i_3 (+ i_2 2 )) (= j_3 (- j_2 1)) (= i_3 i!) (= j_3 j!) ) ) )(inv-f i! j! i_0! i_1! i_2! i_3! j_0! j_1! j_2! j_3! )))
(constraint (=> (inv-f i j i_0 i_1 i_2 i_3 j_0 j_1 j_2 j_3 )(or (not (and (= i i_2) (= j j_2) )) (not (and (not (>= j_2 i_2)) (not (= j_2 6)) )) )))
(check-synth)

