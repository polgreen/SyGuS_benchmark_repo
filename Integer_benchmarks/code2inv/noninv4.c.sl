(set-logic LIA)
(declare-var x Int)
(declare-var x! Int)
(declare-var y Int)
(declare-var y! Int)
(declare-var z Int)
(declare-var z! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var x_1 Int)
(declare-var x_1! Int)
(declare-var x_2 Int)
(declare-var x_2! Int)
(declare-var y_0 Int)
(declare-var y_0! Int)
(declare-var y_1 Int)
(declare-var y_1! Int)
(declare-var y_2 Int)
(declare-var y_2! Int)
(declare-var y_3 Int)
(declare-var y_3! Int)
(declare-var z_0 Int)
(declare-var z_0! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int))Bool) 
(constraint (=> (and (= x x_0) (= x_0 0) )(inv-f x y z x_0 x_1 x_2 y_0 y_1 y_2 y_3 z_0 )))
(constraint (=> (and (inv-f x y z x_0 x_1 x_2 y_0 y_1 y_2 y_3 z_0 ) (or (and (= x_1 x) (= y_1 y) (= x_1 x!) (= y_1 y!) (= y y!) (= z z!) ) (and (= x_1 x) (= y_1 y) (< x_1 500) (= x_2 (+ x_1 1 )) (<= z_0 y_1) (= y_2 z_0) (= y_3 y_2) (= x_2 x!) (= y_3 y!) (= z z_0) (= z! z_0) ) (and (= x_1 x) (= y_1 y) (< x_1 500) (= x_2 (+ x_1 1 )) (not (<= z_0 y_1)) (= y_3 y_1) (= x_2 x!) (= y_3 y!) (= z z_0) (= z! z_0) ) ) )(inv-f x! y! z! x_0! x_1! x_2! y_0! y_1! y_2! y_3! z_0! )))
(constraint (=> (inv-f x y z x_0 x_1 x_2 y_0 y_1 y_2 y_3 z_0 )(or (not (and (= x x_1) (= y y_1) (= z z_0) )) (not (and (not (< x_1 500)) (not (>= z_0 y_1)) )) )))
(check-synth)

