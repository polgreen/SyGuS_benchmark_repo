(set-logic LIA)
(declare-var i Int)
(declare-var i! Int)
(declare-var j Int)
(declare-var j! Int)
(declare-var x Int)
(declare-var x! Int)
(declare-var y Int)
(declare-var y! Int)
(declare-var i_0 Int)
(declare-var i_0! Int)
(declare-var i_1 Int)
(declare-var i_1! Int)
(declare-var j_0 Int)
(declare-var j_0! Int)
(declare-var j_1 Int)
(declare-var j_1! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var x_1 Int)
(declare-var x_1! Int)
(declare-var x_2 Int)
(declare-var x_2! Int)
(declare-var y_0 Int)
(declare-var y_0! Int)
(declare-var y_1 Int)
(declare-var y_1! Int)
(declare-var y_2 Int)
(declare-var y_2! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int)(parameter11 Int)(parameter12 Int)(parameter13 Int))Bool) 
(constraint (=> (and (= i i_1) (= j j_1) (= x x_0) (= y y_0) (= i_1 x_0) (= j_1 y_0) )(inv-f i j x y i_0 i_1 j_0 j_1 x_0 x_1 x_2 y_0 y_1 y_2 )))
(constraint (=> (and (inv-f i j x y i_0 i_1 j_0 j_1 x_0 x_1 x_2 y_0 y_1 y_2 ) (or (and (= x_1 x) (= y_1 y) (= x_1 x!) (= y_1 y!) (= i i!) (= j j!) (= y y!) ) (and (= x_1 x) (= y_1 y) (not (= x_1 0)) (= x_2 (- x_1 1)) (= y_2 (- y_1 1)) (= x_2 x!) (= y_2 y!) (= i i_1) (= i! i_1) (= j j_1) (= j! j_1) ) ) )(inv-f i! j! x! y! i_0! i_1! j_0! j_1! x_0! x_1! x_2! y_0! y_1! y_2! )))
(constraint (=> (inv-f i j x y i_0 i_1 j_0 j_1 x_0 x_1 x_2 y_0 y_1 y_2 )(or (not (and (= i i_1) (= j j_1) (= x x_1) (= y y_1) )) (not (and (not (not (= x_1 0))) (= i_1 j_1) (not (= y_1 0)) )) )))
(check-synth)

