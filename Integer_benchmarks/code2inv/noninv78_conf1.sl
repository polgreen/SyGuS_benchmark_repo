(set-logic LIA)
(declare-var i Int)
(declare-var i! Int)
(declare-var conf_0 Int)
(declare-var conf_0! Int)
(declare-var x Int)
(declare-var x! Int)
(declare-var y Int)
(declare-var y! Int)
(declare-var tmp Int)
(declare-var tmp! Int)
(declare-var i_0 Int)
(declare-var i_0! Int)
(declare-var i_1 Int)
(declare-var i_1! Int)
(declare-var i_2 Int)
(declare-var i_2! Int)
(declare-var i_3 Int)
(declare-var i_3! Int)
(declare-var i_4 Int)
(declare-var i_4! Int)
(declare-var conf_0_0 Int)
(declare-var conf_0_0! Int)
(declare-var conf_0_1 Int)
(declare-var conf_0_1! Int)
(declare-var conf_0_2 Int)
(declare-var conf_0_2! Int)
(declare-var conf_0_3 Int)
(declare-var conf_0_3! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var y_0 Int)
(declare-var y_0! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int)(parameter11 Int)(parameter12 Int)(parameter13 Int)(parameter14 Int)(parameter15 Int))Bool) 
(constraint (=> (and (= i i_1) (= conf_0 conf_0_0) (= x x_0) (= y y_0) (= conf_0_0 2) (= i_1 0) (>= x_0 0) (>= y_0 0) (>= x_0 y_0) )(inv-f i conf_0 x y tmp i_0 i_1 i_2 i_3 i_4 conf_0_0 conf_0_1 conf_0_2 conf_0_3 x_0 y_0 )))
(constraint (=> (and (inv-f i conf_0 x y tmp i_0 i_1 i_2 i_3 i_4 conf_0_0 conf_0_1 conf_0_2 conf_0_3 x_0 y_0 ) (or (and (= i_2 i) (= conf_0_1 conf_0) (= i_2 i!) (= conf_0_1 conf_0!) (= i i!) (= conf_0 conf_0!) (= x x!) (= y y!) (= tmp tmp!) ) (and (= i_2 i) (= conf_0_1 conf_0) (< i_2 y_0) (= i_3 (+ i_2 1 )) (= conf_0_2 (- 161 conf_0_1)) (= i_4 i_3) (= conf_0_3 conf_0_2) (= i_4 i!) (= conf_0_3 conf_0!) (= x x_0) (= x! x_0) (= y y_0) (= y! y_0) (= tmp tmp!) ) (and (= i_2 i) (= conf_0_1 conf_0) (not (< i_2 y_0)) (= i_4 i_2) (= conf_0_3 conf_0_1) (= i_4 i!) (= conf_0_3 conf_0!) (= x x_0) (= x! x_0) (= y y_0) (= y! y_0) (= tmp tmp!) ) ) )(inv-f i! conf_0! x! y! tmp! i_0! i_1! i_2! i_3! i_4! conf_0_0! conf_0_1! conf_0_2! conf_0_3! x_0! y_0! )))
(constraint (=> (inv-f i conf_0 x y tmp i_0 i_1 i_2 i_3 i_4 conf_0_0 conf_0_1 conf_0_2 conf_0_3 x_0 y_0 )(or (not (and (= i i_2) (= conf_0 conf_0_1) (= x x_0) (= y y_0) )) (not (and (< i_2 y_0) (not (<= 0 i_2)) )) )))
(check-synth)

