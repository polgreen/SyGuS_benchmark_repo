(set-logic LIA)
(declare-var m Int)
(declare-var m! Int)
(declare-var n Int)
(declare-var n! Int)
(declare-var x Int)
(declare-var x! Int)
(declare-var tmp Int)
(declare-var tmp! Int)
(declare-var m_0 Int)
(declare-var m_0! Int)
(declare-var m_1 Int)
(declare-var m_1! Int)
(declare-var m_2 Int)
(declare-var m_2! Int)
(declare-var m_3 Int)
(declare-var m_3! Int)
(declare-var n_0 Int)
(declare-var n_0! Int)
(declare-var x_0 Int)
(declare-var x_0! Int)
(declare-var x_1 Int)
(declare-var x_1! Int)
(declare-var x_2 Int)
(declare-var x_2! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int)(parameter11 Int))Bool) 
(constraint (=> (and (= m m_0) (= x x_0) (= x_0 0) (= m_0 0) )(inv-f m n x tmp m_0 m_1 m_2 m_3 n_0 x_0 x_1 x_2 )))
(constraint (=> (and (inv-f m n x tmp m_0 m_1 m_2 m_3 n_0 x_0 x_1 x_2 ) (or (and (= m_1 m) (= x_1 x) (= m_1 m!) (= x_1 x!) (= n n_0) (= n! n_0) (= m m!) (= tmp tmp!) ) (and (= m_1 m) (= x_1 x) (< x_1 n_0) (= m_2 x_1) (= m_3 m_2) (= x_2 (+ x_1 1 )) (= m_3 m!) (= x_2 x!) (= n n_0) (= n! n_0) (= tmp tmp!) ) (and (= m_1 m) (= x_1 x) (< x_1 n_0) (= m_3 m_1) (= x_2 (+ x_1 1 )) (= m_3 m!) (= x_2 x!) (= n n_0) (= n! n_0) (= tmp tmp!) ) ) )(inv-f m! n! x! tmp! m_0! m_1! m_2! m_3! n_0! x_0! x_1! x_2! )))
(constraint (=> (inv-f m n x tmp m_0 m_1 m_2 m_3 n_0 x_0 x_1 x_2 )(or (not (and (= m m_1) (= n n_0) (= x x_1) )) (not (and (not (< x_1 n_0)) (> n_0 0) (not (< m_1 n_0)) )) )))
(check-synth)

