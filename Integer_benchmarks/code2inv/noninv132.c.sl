(set-logic LIA)
(declare-var c Int)
(declare-var c! Int)
(declare-var i Int)
(declare-var i! Int)
(declare-var j Int)
(declare-var j! Int)
(declare-var t Int)
(declare-var t! Int)
(declare-var tmp Int)
(declare-var tmp! Int)
(declare-var c_0 Int)
(declare-var c_0! Int)
(declare-var i_0 Int)
(declare-var i_0! Int)
(declare-var i_1 Int)
(declare-var i_1! Int)
(declare-var i_2 Int)
(declare-var i_2! Int)
(declare-var i_3 Int)
(declare-var i_3! Int)
(declare-var j_0 Int)
(declare-var j_0! Int)
(declare-var j_1 Int)
(declare-var j_1! Int)
(declare-var j_2 Int)
(declare-var j_2! Int)
(declare-var j_3 Int)
(declare-var j_3! Int)
(declare-var t_0 Int)
(declare-var t_0! Int)
(declare-var t_1 Int)
(declare-var t_1! Int)
(declare-var t_2 Int)
(declare-var t_2! Int)
(declare-var t_3 Int)
(declare-var t_3! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int)(parameter8 Int)(parameter9 Int)(parameter10 Int)(parameter11 Int)(parameter12 Int)(parameter13 Int)(parameter14 Int)(parameter15 Int)(parameter16 Int)(parameter17 Int))Bool) 
(constraint (=> (and (= i i_0) (= i_0 0) )(inv-f c i j t tmp c_0 i_0 i_1 i_2 i_3 j_0 j_1 j_2 j_3 t_0 t_1 t_2 t_3 )))
(constraint (=> (and (inv-f c i j t tmp c_0 i_0 i_1 i_2 i_3 j_0 j_1 j_2 j_3 t_0 t_1 t_2 t_3 ) (or (and (= i_1 i) (= j_1 j) (= t_1 t) (= i_1 i!) (= j_1 j!) (= t_1 t!) (= c c!) (= i i!) (= j j!) (= t t!) (= tmp tmp!) ) (and (= i_1 i) (= j_1 j) (= t_1 t) (> c_0 48) (< c_0 57) (= j_2 (+ i_1 i_1 )) (= t_2 (- c_0 48)) (= i_2 (+ j_2 t_2 )) (= i_3 i_2) (= j_3 j_2) (= t_3 t_2) (= i_3 i!) (= j_3 j!) (= t_3 t!) (= c c_0) (= c! c_0) (= tmp tmp!) ) (and (= i_1 i) (= j_1 j) (= t_1 t) (> c_0 48) (not (< c_0 57)) (= i_3 i_1) (= j_3 j_1) (= t_3 t_1) (= i_3 i!) (= j_3 j!) (= t_3 t!) (= c c_0) (= c! c_0) (= tmp tmp!) ) (and (= i_1 i) (= j_1 j) (= t_1 t) (not (> c_0 48)) (= i_3 i_1) (= j_3 j_1) (= t_3 t_1) (= i_3 i!) (= j_3 j!) (= t_3 t!) (= c c_0) (= c! c_0) (= tmp tmp!) ) ) )(inv-f c! i! j! t! tmp! c_0! i_0! i_1! i_2! i_3! j_0! j_1! j_2! j_3! t_0! t_1! t_2! t_3! )))
(constraint (=> (inv-f c i j t tmp c_0 i_0 i_1 i_2 i_3 j_0 j_1 j_2 j_3 t_0 t_1 t_2 t_3 )(or (not (and (= c c_0) (= i i_1) (= j j_1) (= t t_1) )) (not (not (>= i_1 0))) )))
(check-synth)

