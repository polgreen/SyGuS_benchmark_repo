(set-logic LIA)
(declare-var i Int)
(declare-var j Int)
(declare-var k Int)
(declare-var m Int)
(declare-var n Int)
(declare-var x Int)
(declare-var y Int)
(declare-var i! Int)
(declare-var j! Int)
(declare-var k! Int)
(declare-var m! Int)
(declare-var n! Int)
(declare-var x! Int)
(declare-var y! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int))Bool) 
(constraint (=> (and (= k (+ x y )) (and (= m 0) (= j 0) ) )(inv-f i j k m n x y )))
(constraint (=> (and (inv-f i j k m n x y ) (and (< j n) (and (= i! i) (and (= k! k) (and (= n! n) (and (= j! (+ j 1 )) (and (or (= m! m) (= m! j) ) (or (and (= j i) (and (= x! (+ x 1 )) (= y! (- y 1)) ) ) (and (not (= j i)) (and (= x! (- x 1)) (= y! (+ y 1 )) ) ) ) ) ) ) ) ) ) )(inv-f i! j! k! m! n! x! y! )))
(constraint (=> (inv-f i j k m n x y )(and (= k (+ x y )) (or (not (> n 0)) (and (<= 0 m) (< m n) ) ) )))
(check-synth)

