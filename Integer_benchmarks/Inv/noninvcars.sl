(set-logic LIA)
(declare-var x1 Int)
(declare-var x2 Int)
(declare-var x3 Int)
(declare-var v1 Int)
(declare-var v2 Int)
(declare-var v3 Int)
(declare-var t Int)
(declare-var RETURN Int)
(declare-var x1! Int)
(declare-var x2! Int)
(declare-var x3! Int)
(declare-var v1! Int)
(declare-var v2! Int)
(declare-var v3! Int)
(declare-var t! Int)
(declare-var RETURN! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int)(parameter7 Int))Bool) 
(constraint (=> (and (= RETURN 0) (= x1 100) (= x2 75) (= x3 (- 0 50)) (>= v3 0) (<= v1 5) (>= (- v1 v3) 0) (= (- (- (* 2 v2) v1) v3) 0) (= t 0) (>= (+ v2 5 ) 0) (<= v2 5) )(inv-f x1 x2 x3 v1 v2 v3 t RETURN )))
(constraint (=> (and (inv-f x1 x2 x3 v1 v2 v3 t RETURN ) (and (= RETURN 0) (or (and (not (>= (+ v2 5 ) 0)) (= RETURN! 1) ) (and (>= (+ v2 5 ) 0) (= RETURN! RETURN) ) ) (or (and (not (<= v2 5)) (= RETURN! 1) ) (and (<= v2 5) (= RETURN! RETURN) ) ) (or (and (or (and (not (>= (- (- (* 2 x2) x1) x3) 0)) (= RETURN! 1) ) (and (>= (- (- (* 2 x2) x1) x3) 0) (= RETURN! RETURN) ) ) (= x1! (+ x1 v1 )) (= x3! (+ x3 v3 )) (= x2! (+ x2 v2 )) (= v2! (- v2 1)) (= v1! v1) (= v3! v3) (= t! (+ t 1 )) ) (and (or (and (not (<= (- (- (* 2 x2) x1) x3) 0)) (= RETURN! 1) ) (and (<= (- (- (* 2 x2) x1) x3) 0) (= RETURN! RETURN) ) ) (= x1! (+ x1 v1 )) (= x3! (+ x3 v3 )) (= x2! (+ x2 v2 )) (= v2! (+ v2 1 )) (= v1! v1) (= v3! v3) (= t! (+ t 1 )) ) ) ) )(inv-f x1! x2! x3! v1! v2! v3! t! RETURN! )))
(constraint (=> (inv-f x1 x2 x3 v1 v2 v3 t RETURN )(=> (= RETURN 0)(and (<= v1 5) (>= (+ (* 2 v2) (* 2 t) ) (+ v1 v3 )) (>= (+ (* 5 t) 75 ) x2) (<= v2 6) (>= v3 0) (>= (+ v2 6 ) 0) (>= (+ x2 (* 5 t) ) 75) (>= (- (+ v1 v3 (* 2 t) ) (* 2 v2)) 0) (>= (- v1 v3) 0) ))))
(check-synth)

