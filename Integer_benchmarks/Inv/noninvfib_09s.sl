(set-logic LIA)
(declare-var i Int)
(declare-var pvlen Int)
(declare-var t Int)
(declare-var k Int)
(declare-var n Int)
(declare-var j Int)
(declare-var turn Int)
(declare-var i! Int)
(declare-var pvlen! Int)
(declare-var t! Int)
(declare-var k! Int)
(declare-var n! Int)
(declare-var j! Int)
(declare-var turn! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int)(parameter6 Int))Bool) 
(constraint (=> (and (= k 0) (and (= i 0) (= turn 0) ) )(inv-f i pvlen t k n j turn )))
(constraint (=> (and (inv-f i pvlen t k n j turn ) (or (and (= turn 0) (and (= i! (+ i 1 )) (and (= pvlen! pvlen) (and (= t! t) (and (= k! k) (and (= n! n) (and (= j! j) (= turn! 0) ) ) ) ) ) ) ) (or (and (= turn 0) (and (= i! (+ i 1 )) (and (= pvlen! pvlen) (and (= t! t) (and (= k! k) (and (= n! n) (and (= j! j) (= turn! 1) ) ) ) ) ) ) ) (or (and (= turn 1) (and (> i pvlen) (and (= i! 0) (and (= pvlen! i) (and (= t! t) (and (= k! k) (and (= n! n) (and (= j! j) (= turn! 2) ) ) ) ) ) ) ) ) (or (and (= turn 1) (and (<= i pvlen) (and (= i! 0) (and (= pvlen! pvlen) (and (= t! t) (and (= k! k) (and (= n! n) (and (= j! j) (= turn! 2) ) ) ) ) ) ) ) ) (or (and (= turn 2) (and (= i! (+ i 1 )) (and (= pvlen! pvlen) (and (= t! i) (and (= k! (+ k 1 )) (and (= n! n) (and (= j! j) (= turn! 2) ) ) ) ) ) ) ) (or (and (= turn 2) (and (= i! (+ i 1 )) (and (= pvlen! pvlen) (and (= t! i) (and (= k! (+ k 1 )) (and (= n! n) (and (= j! j) (= turn! 3) ) ) ) ) ) ) ) (or (and (= turn 3) (and (= i! i) (and (= pvlen! pvlen) (and (= t! t) (and (= k! k) (and (= n! n) (and (= j! j) (= turn! 3) ) ) ) ) ) ) ) (or (and (= turn 3) (and (= i! i) (and (= pvlen! pvlen) (and (= t! t) (and (= k! k) (and (= n! n) (and (= j! j) (= turn! 4) ) ) ) ) ) ) ) (and (= turn 4) (and (= i! i) (and (= pvlen! pvlen) (and (= t! t) (and (= k! k) (and (= n! i) (and (= j! 0) (= turn! 5) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )(inv-f i! pvlen! t! k! n! j! turn! )))
(constraint (=> (inv-f i pvlen t k n j turn )(>= k 0)))
(check-synth)

