(set-logic LIA)
(declare-var k Int)
(declare-var b Int)
(declare-var i Int)
(declare-var j Int)
(declare-var n Int)
(declare-var k! Int)
(declare-var b! Int)
(declare-var i! Int)
(declare-var j! Int)
(declare-var n! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int))Bool) 
(constraint (=> (and (> k 0) (and (= i j) (and (= n 0) (or (= b 1) (= b 0) ) ) ) )(inv-f k b i j n )))
(constraint (=> (and (inv-f k b i j n ) (or (and (>= n (* 2 k)) (and (= k! k) (and (= b! b) (and (= i! i) (and (= j! j) (= n! n) ) ) ) ) ) (or (and (< n (* 2 k)) (and (= b 1) (and (= k! k) (and (= b! 0) (and (= i! (+ i 1 )) (and (= j! j) (= n! (+ n 1 )) ) ) ) ) ) ) (and (< n (* 2 k)) (and (not (= b 1)) (and (= k! k) (and (= b! 1) (and (= i! i) (and (= j! (+ j 1 )) (= n! (+ n 1 )) ) ) ) ) ) ) ) ) )(inv-f k! b! i! j! n! )))
(constraint (=> (inv-f k b i j n )(=> (>= n (* 2 k))(= i j))))
(check-synth)

