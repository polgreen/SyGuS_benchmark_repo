(set-logic LIA)
(declare-var x Int)
(declare-var y Int)
(declare-var w Int)
(declare-var z Int)
(declare-var x! Int)
(declare-var y! Int)
(declare-var w! Int)
(declare-var z! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int))Bool) 
(constraint (=> (and (= w 1) (and (= z 0) (and (= x 0) (= y 0) ) ) )(inv-f x y w z )))
(constraint (=> (and (inv-f x y w z ) (or (and (= w 1) (and (= z 0) (and (= x! (+ x 1 )) (and (= w! 0) (and (= y! (+ y 1 )) (= z! 1) ) ) ) ) ) (or (and (not (= w 1)) (and (= z 0) (and (= x! x) (and (= w! w) (and (= y! (+ y 1 )) (= z! 1) ) ) ) ) ) (or (and (= w 1) (and (not (= z 0)) (and (= x! (+ x 1 )) (and (= w! 0) (and (= y! y) (= z! z) ) ) ) ) ) (and (not (= w 1)) (and (not (= z 0)) (and (= x! x) (and (= w! w) (and (= y! y) (= z! z) ) ) ) ) ) ) ) ) )(inv-f x! y! w! z! )))
(constraint (=> (inv-f x y w z )(= x y)))
(check-synth)

