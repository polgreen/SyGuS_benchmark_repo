(set-logic LIA)
(declare-var y Int)
(declare-var z Int)
(declare-var c Int)
(declare-var x1 Int)
(declare-var x2 Int)
(declare-var x3 Int)
(declare-var b Bool)
(declare-var b! Bool)
(declare-var y! Int)
(declare-var z! Int)
(declare-var c! Int)
(declare-var x1! Int)
(declare-var x2! Int)
(declare-var x3! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int))Bool) 
(constraint (=> (and (and (= c 0) (>= y 0) ) (and (>= 127 y) (= z (* 36 y)) ) )(inv-f y z c x1 x2 x3 )))
(constraint (=> (and (inv-f y z c x1 x2 x3 ) (and (and (and (< c 36) (= z! (+ z 1 )) ) (= c! (+ c 1 )) ) (= y! y) ) )(inv-f y! z! c! x1! x2! x3! )))
(constraint (=> (inv-f y z c x1 x2 x3 )(not (and (< c 36) (or (< z 0) (>= z 4608) ) ))))
(check-synth)

