(set-logic LIA)
(declare-var x Int)
(declare-var y Int)
(declare-var i Int)
(declare-var j Int)
(declare-var turn Int)
(declare-var x! Int)
(declare-var y! Int)
(declare-var i! Int)
(declare-var j! Int)
(declare-var turn! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int))Bool) 
(constraint (=> (and (= x 0) (and (= y 0) (and (= i 0) (and (= j 0) (= turn 0) ) ) ) )(inv-f x y i j turn )))
(constraint (=> (and (inv-f x y i j turn ) (or (and (= turn 0) (and (= x! x) (and (= y! y) (and (= i! i) (and (= j! j) (= turn! 1) ) ) ) ) ) (or (and (= turn 0) (and (= x! x) (and (= y! y) (and (= i! i) (and (= j! j) (= turn! 2) ) ) ) ) ) (or (and (= turn 1) (and (= x y) (and (= x! x) (and (= y! y) (and (= i! (+ i 1 )) (and (= j! j) (= turn! 1) ) ) ) ) ) ) (or (and (= turn 1) (and (= x y) (and (= x! x) (and (= y! y) (and (= i! (+ i 1 )) (and (= j! j) (= turn! 2) ) ) ) ) ) ) (or (and (= turn 1) (and (not (= x y)) (and (= x! x) (and (= y! y) (and (= i! i) (and (= j! (+ j 1 )) (= turn! 1) ) ) ) ) ) ) (or (and (= turn 1) (and (not (= x y)) (and (= x! x) (and (= y! y) (and (= i! i) (and (= j! (+ j 1 )) (= turn! 2) ) ) ) ) ) ) (or (and (= turn 2) (and (>= i j) (and (= x! (+ x 1 )) (and (= y! (+ y 1 )) (and (= i! i) (and (= j! j) (= turn! 0) ) ) ) ) ) ) (and (= turn 2) (and (< i j) (and (= x! x) (and (= y! (+ y 1 )) (and (= i! i) (and (= j! j) (= turn! 0) ) ) ) ) ) ) ) ) ) ) ) ) ) )(inv-f x! y! i! j! turn! )))
(constraint (=> (inv-f x y i j turn )(>= i j)))
(check-synth)

