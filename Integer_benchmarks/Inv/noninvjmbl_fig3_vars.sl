(set-logic LIA)
(declare-var x Int)
(declare-var y Int)
(declare-var lock Int)
(declare-var v1 Int)
(declare-var v2 Int)
(declare-var v3 Int)
(declare-var x! Int)
(declare-var y! Int)
(declare-var lock! Int)
(declare-var v1! Int)
(declare-var v2! Int)
(declare-var v3! Int)
(synth-fun inv-f((parameter0 Int)(parameter1 Int)(parameter2 Int)(parameter3 Int)(parameter4 Int)(parameter5 Int))Bool) 
(constraint (=> (or (and (= x y) (= lock 1) ) (and (= (+ x 1 ) y) (= lock 0) ) )(inv-f x y lock v1 v2 v3 )))
(constraint (=> (and (inv-f x y lock v1 v2 v3 ) (or (and (and (not (= x y)) (= lock! 1) ) (= x! y) ) (and (and (and (not (= x y)) (= lock! 0) ) (= x! y) ) (= y! (+ y 1 )) ) ) )(inv-f x! y! lock! v1! v2! v3! )))
(constraint (=> (inv-f x y lock v1 v2 v3 )(not (and (= x y) (not (= lock 1)) ))))
(check-synth)

