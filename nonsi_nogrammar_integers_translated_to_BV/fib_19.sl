(set-logic ALL)
(declare-var n (BitVec 32))
(declare-var m (BitVec 32))
(declare-var x (BitVec 32))
(declare-var y (BitVec 32))
(declare-var n! (BitVec 32))
(declare-var m! (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var y! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32)))Bool) 
(constraint (=> (and (bvuge n (_ bv0 32)) (and (bvuge m (_ bv0 32)) (and (bvult m n) (and (= x (_ bv0 32)) (= y m) ) ) ) )(inv-f n m x y )))
(constraint (=> (and (inv-f n m x y ) (or (and (bvult x n) (and (bvule (bvadd x (_ bv1 32)) m) (and (= x! (bvadd x (_ bv1 32))) (and (= y! y) (and (= n! n) (= m! m) ) ) ) ) ) (or (and (bvult x n) (and (bvugt (bvadd x (_ bv1 32)) m) (and (= x! (bvadd x (_ bv1 32))) (and (= y! (bvadd y (_ bv1 32))) (and (= n! n) (= m! m) ) ) ) ) ) (and (bvuge x n) (and (= x! x) (and (= y! y) (and (= n! n) (= m! m) ) ) ) ) ) ) )(inv-f n! m! x! y! )))
(constraint (=> (inv-f n m x y )(=> (not (bvult x n))(= y n))))
(check-synth)

