(set-logic ALL)
(declare-var m (_ BitVec 32))
(declare-var m! (_ BitVec 32))
(declare-var n (_ BitVec 32))
(declare-var n! (_ BitVec 32))
(declare-var x (_ BitVec 32))
(declare-var x! (_ BitVec 32))
(declare-var tmp (_ BitVec 32))
(declare-var tmp! (_ BitVec 32))
(declare-var m_0 (_ BitVec 32))
(declare-var m_0! (_ BitVec 32))
(declare-var m_1 (_ BitVec 32))
(declare-var m_1! (_ BitVec 32))
(declare-var m_2 (_ BitVec 32))
(declare-var m_2! (_ BitVec 32))
(declare-var m_3 (_ BitVec 32))
(declare-var m_3! (_ BitVec 32))
(declare-var n_0 (_ BitVec 32))
(declare-var n_0! (_ BitVec 32))
(declare-var x_0 (_ BitVec 32))
(declare-var x_0! (_ BitVec 32))
(declare-var x_1 (_ BitVec 32))
(declare-var x_1! (_ BitVec 32))
(declare-var x_2 (_ BitVec 32))
(declare-var x_2! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32))(parameter6 (_ BitVec 32))(parameter7 (_ BitVec 32))(parameter8 (_ BitVec 32))(parameter9 (_ BitVec 32))(parameter10 (_ BitVec 32))(parameter11 (_ BitVec 32)))Bool) 
(constraint (=> (and (and (and (= m m_0) (= x x_0) ) (= x_0 (_ bv1 32)) ) (= m_0 (_ bv1 32)) )(inv-f m n x tmp m_0 m_1 m_2 m_3 n_0 x_0 x_1 x_2 )))
(constraint (=> (and (inv-f m n x tmp m_0 m_1 m_2 m_3 n_0 x_0 x_1 x_2 ) (or (or (and (and (and (and (and (and (and (= m_1 m) (= x_1 x) ) (= m_1 m!) ) (= x_1 x!) ) (= n n_0) ) (= n! n_0) ) (= m m!) ) (= tmp tmp!) ) (and (and (and (and (and (and (and (and (and (and (= m_1 m) (= x_1 x) ) (bvult x_1 n_0) ) (= m_2 x_1) ) (= m_3 m_2) ) (= x_2 (bvadd x_1 (_ bv1 32))) ) (= m_3 m!) ) (= x_2 x!) ) (= n n_0) ) (= n! n_0) ) (= tmp tmp!) ) ) (and (and (and (and (and (and (and (and (and (= m_1 m) (= x_1 x) ) (bvult x_1 n_0) ) (= m_3 m_1) ) (= x_2 (bvadd x_1 (_ bv1 32))) ) (= m_3 m!) ) (= x_2 x!) ) (= n n_0) ) (= n! n_0) ) (= tmp tmp!) ) ) )(inv-f m! n! x! tmp! m_0! m_1! m_2! m_3! n_0! x_0! x_1! x_2! )))
(constraint (=> (inv-f m n x tmp m_0 m_1 m_2 m_3 n_0 x_0 x_1 x_2 )(or (not (and (and (= m m_1) (= n n_0) ) (= x x_1) )) (not (and (and (not (bvult x_1 n_0)) (bvugt n_0 (_ bv1 32)) ) (not (bvult m_1 n_0)) )) )))
(check-synth)

