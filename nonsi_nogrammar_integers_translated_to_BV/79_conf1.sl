(set-logic ALL)
(declare-var i (BitVec 32))
(declare-var i! (BitVec 32))
(declare-var conf_0 (BitVec 32))
(declare-var conf_0! (BitVec 32))
(declare-var x (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var y (BitVec 32))
(declare-var y! (BitVec 32))
(declare-var tmp (BitVec 32))
(declare-var tmp! (BitVec 32))
(declare-var i_0 (BitVec 32))
(declare-var i_0! (BitVec 32))
(declare-var i_1 (BitVec 32))
(declare-var i_1! (BitVec 32))
(declare-var i_2 (BitVec 32))
(declare-var i_2! (BitVec 32))
(declare-var i_3 (BitVec 32))
(declare-var i_3! (BitVec 32))
(declare-var i_4 (BitVec 32))
(declare-var i_4! (BitVec 32))
(declare-var conf_0_0 (BitVec 32))
(declare-var conf_0_0! (BitVec 32))
(declare-var conf_0_1 (BitVec 32))
(declare-var conf_0_1! (BitVec 32))
(declare-var conf_0_2 (BitVec 32))
(declare-var conf_0_2! (BitVec 32))
(declare-var conf_0_3 (BitVec 32))
(declare-var conf_0_3! (BitVec 32))
(declare-var x_0 (BitVec 32))
(declare-var x_0! (BitVec 32))
(declare-var y_0 (BitVec 32))
(declare-var y_0! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32))(parameter4 (BitVec 32))(parameter5 (BitVec 32))(parameter6 (BitVec 32))(parameter7 (BitVec 32))(parameter8 (BitVec 32))(parameter9 (BitVec 32))(parameter10 (BitVec 32))(parameter11 (BitVec 32))(parameter12 (BitVec 32))(parameter13 (BitVec 32))(parameter14 (BitVec 32))(parameter15 (BitVec 32)))Bool) 
(constraint (=> (and (and (and (and (and (and (and (and (= i i_1) (= conf_0 conf_0_0) ) (= x x_0) ) (= y y_0) ) (= conf_0_0 (_ bv2 32)) ) (= i_1 (_ bv0 32)) ) (bvuge x_0 (_ bv0 32)) ) (bvuge y_0 (_ bv0 32)) ) (bvuge x_0 y_0) )(inv-f i conf_0 x y tmp i_0 i_1 i_2 i_3 i_4 conf_0_0 conf_0_1 conf_0_2 conf_0_3 x_0 y_0 )))
(constraint (=> (and (inv-f i conf_0 x y tmp i_0 i_1 i_2 i_3 i_4 conf_0_0 conf_0_1 conf_0_2 conf_0_3 x_0 y_0 ) (or (or (and (and (and (and (and (and (and (and (= i_2 i) (= conf_0_1 conf_0) ) (= i_2 i!) ) (= conf_0_1 conf_0!) ) (= i i!) ) (= conf_0 conf_0!) ) (= x x!) ) (= y y!) ) (= tmp tmp!) ) (and (and (and (and (and (and (and (and (and (and (and (and (and (= i_2 i) (= conf_0_1 conf_0) ) (bvult i_2 y_0) ) (= i_3 (bvadd i_2 (_ bv1 32))) ) (= conf_0_2 (bvsub (_ bv161 32) conf_0_1)) ) (= i_4 i_3) ) (= conf_0_3 conf_0_2) ) (= i_4 i!) ) (= conf_0_3 conf_0!) ) (= x x_0) ) (= x! x_0) ) (= y y_0) ) (= y! y_0) ) (= tmp tmp!) ) ) (and (and (and (and (and (and (and (and (and (and (and (= i_2 i) (= conf_0_1 conf_0) ) (not (bvult i_2 y_0)) ) (= i_4 i_2) ) (= conf_0_3 conf_0_1) ) (= i_4 i!) ) (= conf_0_3 conf_0!) ) (= x x_0) ) (= x! x_0) ) (= y y_0) ) (= y! y_0) ) (= tmp tmp!) ) ) )(inv-f i! conf_0! x! y! tmp! i_0! i_1! i_2! i_3! i_4! conf_0_0! conf_0_1! conf_0_2! conf_0_3! x_0! y_0! )))
(constraint (=> (inv-f i conf_0 x y tmp i_0 i_1 i_2 i_3 i_4 conf_0_0 conf_0_1 conf_0_2 conf_0_3 x_0 y_0 )(or (not (and (and (and (= i i_2) (= conf_0 conf_0_1) ) (= x x_0) ) (= y y_0) )) (not (and (and (bvuge i_2 x_0) (bvugt (_ bv0 32) i_2) ) (not (bvuge i_2 y_0)) )) )))
(check-synth)

