(set-logic ALL)
(declare-var m (_ BitVec 32))
(declare-var a (_ BitVec 32))
(declare-var j (_ BitVec 32))
(declare-var k (_ BitVec 32))
(declare-var r (_ BitVec 32))
(declare-var c (_ BitVec 32))
(declare-var m! (_ BitVec 32))
(declare-var a! (_ BitVec 32))
(declare-var j! (_ BitVec 32))
(declare-var k! (_ BitVec 32))
(declare-var r! (_ BitVec 32))
(declare-var c! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32)))Bool) 
(constraint (=> (and (or (bvsle a m) (= j (_ bv0 32)) ) (and (bvslt j r) (= k (_ bv0 32)) ) )(inv-f m a j k r c )))
(constraint (=> (and (inv-f m a j k r c ) (or (and (and (= j! j) (and (= r! r) (= c! c) ) ) (and (bvslt k c) (and (bvslt m a!) (and (= m! a!) (= k! (bvadd k (_ bv1 32))) ) ) ) ) (and (= j! j) (and (= r! r) (and (= c! c) (and (bvslt k c) (and (bvsgt m a!) (= k! (bvadd k (_ bv1 32))) ) ) ) ) ) ) )(inv-f m! a! j! k! r! c! )))
(constraint (=> (inv-f m a j k r c )(or (bvslt k c) (or (bvsle a m) (= j (_ bv4294967295 32)) ) )))
(check-synth)

