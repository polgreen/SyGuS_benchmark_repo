(set-logic ALL)
(declare-var x (BitVec 32))
(declare-var y (BitVec 32))
(declare-var k (BitVec 32))
(declare-var j (BitVec 32))
(declare-var i (BitVec 32))
(declare-var n (BitVec 32))
(declare-var m (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var y! (BitVec 32))
(declare-var k! (BitVec 32))
(declare-var j! (BitVec 32))
(declare-var i! (BitVec 32))
(declare-var n! (BitVec 32))
(declare-var m! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32))(parameter4 (BitVec 32))(parameter5 (BitVec 32))(parameter6 (BitVec 32)))Bool) 
(constraint (=> (and (= (bvadd x y) k) (and (= m (_ bv0 32)) (= j (_ bv0 32)) ) )(inv-f x y k j i n m )))
(constraint (=> (and (inv-f x y k j i n m ) (or (and (bvult j n) (and (= j i) (and (= x! (bvadd x (_ bv1 32))) (and (= y! (bvsub y (_ bv1 32))) (and (= k! k) (and (= j! (bvadd j (_ bv1 32))) (and (= i! i) (and (= n! n) (= m! m) ) ) ) ) ) ) ) ) (or (and (bvult j n) (and (= j i) (and (= x! (bvadd x (_ bv1 32))) (and (= y! (bvsub y (_ bv1 32))) (and (= k! k) (and (= j! (bvadd j (_ bv1 32))) (and (= i! i) (and (= n! n) (= m! j) ) ) ) ) ) ) ) ) (or (and (bvult j n) (and (not (= j i)) (and (= x! (bvsub x (_ bv1 32))) (and (= y! (bvadd y (_ bv1 32))) (and (= k! k) (and (= j! (bvadd j (_ bv1 32))) (and (= i! i) (and (= n! n) (= m! m) ) ) ) ) ) ) ) ) (or (and (bvult j n) (and (not (= j i)) (and (= x! (bvsub x (_ bv1 32))) (and (= y! (bvadd y (_ bv1 32))) (and (= k! k) (and (= j! (bvadd j (_ bv1 32))) (and (= i! i) (and (= n! n) (= m! j) ) ) ) ) ) ) ) ) (and (bvuge j n) (and (= x! x) (and (= y! y) (and (= k! k) (and (= j! j) (and (= i! i) (and (= n! n) (= m! m) ) ) ) ) ) ) ) ) ) ) ) )(inv-f x! y! k! j! i! n! m! )))
(constraint (=> (inv-f x y k j i n m )(=> (bvuge j n)(and (= (bvadd x y) k) (and (or (bvule n (_ bv0 32)) (bvule (_ bv0 32) m) ) (or (bvule n (_ bv0 32)) (bvule m n) ) ) ))))
(check-synth)

