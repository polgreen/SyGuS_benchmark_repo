(set-logic ALL)
(declare-var x (BitVec 32))
(declare-var y (BitVec 32))
(declare-var lock (BitVec 32))
(declare-var v1 (BitVec 32))
(declare-var v2 (BitVec 32))
(declare-var v3 (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var y! (BitVec 32))
(declare-var lock! (BitVec 32))
(declare-var v1! (BitVec 32))
(declare-var v2! (BitVec 32))
(declare-var v3! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32))(parameter4 (BitVec 32))(parameter5 (BitVec 32)))Bool) 
(constraint (=> (or (and (= x y) (= lock (_ bv1 32)) ) (and (= (bvadd x (_ bv1 32)) y) (= lock (_ bv0 32)) ) )(inv-f x y lock v1 v2 v3 )))
(constraint (=> (and (inv-f x y lock v1 v2 v3 ) (or (and (and (not (= x y)) (= lock! (_ bv1 32)) ) (= x! y) ) (and (and (and (not (= x y)) (= lock! (_ bv0 32)) ) (= x! y) ) (= y! (bvadd y (_ bv1 32))) ) ) )(inv-f x! y! lock! v1! v2! v3! )))
(constraint (=> (inv-f x y lock v1 v2 v3 )(not (and (= x y) (not (= lock (_ bv1 32))) ))))
(check-synth)

