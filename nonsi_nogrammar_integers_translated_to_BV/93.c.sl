(set-logic ALL)
(declare-var i (BitVec 32))
(declare-var i! (BitVec 32))
(declare-var n (BitVec 32))
(declare-var n! (BitVec 32))
(declare-var x (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var y (BitVec 32))
(declare-var y! (BitVec 32))
(declare-var tmp (BitVec 32))
(declare-var tmp! (BitVec 32))
(declare-var i_0 (BitVec 32))
(declare-var i_0! (BitVec 32))
(declare-var i_1 (BitVec 32))
(declare-var i_1! (BitVec 32))
(declare-var i_2 (BitVec 32))
(declare-var i_2! (BitVec 32))
(declare-var i_3 (BitVec 32))
(declare-var i_3! (BitVec 32))
(declare-var n_0 (BitVec 32))
(declare-var n_0! (BitVec 32))
(declare-var x_0 (BitVec 32))
(declare-var x_0! (BitVec 32))
(declare-var x_1 (BitVec 32))
(declare-var x_1! (BitVec 32))
(declare-var x_2 (BitVec 32))
(declare-var x_2! (BitVec 32))
(declare-var x_3 (BitVec 32))
(declare-var x_3! (BitVec 32))
(declare-var x_4 (BitVec 32))
(declare-var x_4! (BitVec 32))
(declare-var x_5 (BitVec 32))
(declare-var x_5! (BitVec 32))
(declare-var y_0 (BitVec 32))
(declare-var y_0! (BitVec 32))
(declare-var y_1 (BitVec 32))
(declare-var y_1! (BitVec 32))
(declare-var y_2 (BitVec 32))
(declare-var y_2! (BitVec 32))
(declare-var y_3 (BitVec 32))
(declare-var y_3! (BitVec 32))
(declare-var y_4 (BitVec 32))
(declare-var y_4! (BitVec 32))
(declare-var y_5 (BitVec 32))
(declare-var y_5! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32))(parameter4 (BitVec 32))(parameter5 (BitVec 32))(parameter6 (BitVec 32))(parameter7 (BitVec 32))(parameter8 (BitVec 32))(parameter9 (BitVec 32))(parameter10 (BitVec 32))(parameter11 (BitVec 32))(parameter12 (BitVec 32))(parameter13 (BitVec 32))(parameter14 (BitVec 32))(parameter15 (BitVec 32))(parameter16 (BitVec 32))(parameter17 (BitVec 32))(parameter18 (BitVec 32))(parameter19 (BitVec 32))(parameter20 (BitVec 32))(parameter21 (BitVec 32)))Bool) 
(constraint (=> (and (and (and (and (and (and (and (= i i_1) (= n n_0) ) (= x x_1) ) (= y y_1) ) (bvuge n_0 (_ bv0 32)) ) (= i_1 (_ bv0 32)) ) (= x_1 (_ bv0 32)) ) (= y_1 (_ bv0 32)) )(inv-f i n x y tmp i_0 i_1 i_2 i_3 n_0 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 y_4 y_5 )))
(constraint (=> (and (inv-f i n x y tmp i_0 i_1 i_2 i_3 n_0 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 y_4 y_5 ) (or (or (and (and (and (and (and (and (and (and (and (and (= i_2 i) (= x_2 x) ) (= y_2 y) ) (= i_2 i!) ) (= x_2 x!) ) (= y_2 y!) ) (= n n_0) ) (= n! n_0) ) (= x x!) ) (= y y!) ) (= tmp tmp!) ) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= i_2 i) (= x_2 x) ) (= y_2 y) ) (bvult i_2 n_0) ) (= i_3 (bvadd i_2 (_ bv1 32))) ) (= x_3 (bvadd x_2 (_ bv1 32))) ) (= y_3 (bvadd y_2 (_ bv2 32))) ) (= x_4 x_3) ) (= y_4 y_3) ) (= i_3 i!) ) (= x_4 x!) ) (= y_4 y!) ) (= n n_0) ) (= n! n_0) ) (= tmp tmp!) ) ) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= i_2 i) (= x_2 x) ) (= y_2 y) ) (bvult i_2 n_0) ) (= i_3 (bvadd i_2 (_ bv1 32))) ) (= x_5 (bvadd x_2 (_ bv2 32))) ) (= y_5 (bvadd y_2 (_ bv1 32))) ) (= x_4 x_5) ) (= y_4 y_5) ) (= i_3 i!) ) (= x_4 x!) ) (= y_4 y!) ) (= n n_0) ) (= n! n_0) ) (= tmp tmp!) ) ) )(inv-f i! n! x! y! tmp! i_0! i_1! i_2! i_3! n_0! x_0! x_1! x_2! x_3! x_4! x_5! y_0! y_1! y_2! y_3! y_4! y_5! )))
(constraint (=> (inv-f i n x y tmp i_0 i_1 i_2 i_3 n_0 x_0 x_1 x_2 x_3 x_4 x_5 y_0 y_1 y_2 y_3 y_4 y_5 )(or (not (and (and (and (= i i_2) (= n n_0) ) (= x x_2) ) (= y y_2) )) (not (and (not (bvult i_2 n_0)) (not (= (bvmul (_ bv3 32) n_0) (bvadd x_2 y_2))) )) )))
(check-synth)

