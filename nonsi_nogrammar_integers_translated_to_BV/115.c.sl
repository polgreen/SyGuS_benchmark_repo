(set-logic ALL)
(declare-var sn (BitVec 32))
(declare-var sn! (BitVec 32))
(declare-var x (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var tmp (BitVec 32))
(declare-var tmp! (BitVec 32))
(declare-var sn_0 (BitVec 32))
(declare-var sn_0! (BitVec 32))
(declare-var sn_1 (BitVec 32))
(declare-var sn_1! (BitVec 32))
(declare-var sn_2 (BitVec 32))
(declare-var sn_2! (BitVec 32))
(declare-var sn_3 (BitVec 32))
(declare-var sn_3! (BitVec 32))
(declare-var x_0 (BitVec 32))
(declare-var x_0! (BitVec 32))
(declare-var x_1 (BitVec 32))
(declare-var x_1! (BitVec 32))
(declare-var x_2 (BitVec 32))
(declare-var x_2! (BitVec 32))
(declare-var x_3 (BitVec 32))
(declare-var x_3! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32))(parameter4 (BitVec 32))(parameter5 (BitVec 32))(parameter6 (BitVec 32))(parameter7 (BitVec 32))(parameter8 (BitVec 32))(parameter9 (BitVec 32))(parameter10 (BitVec 32)))Bool) 
(constraint (=> (and (and (and (= sn sn_1) (= x x_1) ) (= sn_1 (_ bv0 32)) ) (= x_1 (_ bv0 32)) )(inv-f sn x tmp sn_0 sn_1 sn_2 sn_3 x_0 x_1 x_2 x_3 )))
(constraint (=> (and (inv-f sn x tmp sn_0 sn_1 sn_2 sn_3 x_0 x_1 x_2 x_3 ) (or (and (and (and (and (and (and (= sn_2 sn) (= x_2 x) ) (= sn_2 sn!) ) (= x_2 x!) ) (= sn sn!) ) (= x x!) ) (= tmp tmp!) ) (and (and (and (and (and (and (= sn_2 sn) (= x_2 x) ) (= x_3 (bvadd x_2 (_ bv1 32))) ) (= sn_3 (bvadd sn_2 (_ bv1 32))) ) (= sn_3 sn!) ) (= x_3 x!) ) (= tmp tmp!) ) ) )(inv-f sn! x! tmp! sn_0! sn_1! sn_2! sn_3! x_0! x_1! x_2! x_3! )))
(constraint (=> (inv-f sn x tmp sn_0 sn_1 sn_2 sn_3 x_0 x_1 x_2 x_3 )(or (not (and (= sn sn_2) (= x x_2) )) (not (and (not (= sn_2 (_ bv4294967295 32))) (not (= sn_2 x_2)) )) )))
(check-synth)

