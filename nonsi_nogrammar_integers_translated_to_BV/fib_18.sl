(set-logic ALL)
(declare-var b (BitVec 32))
(declare-var j (BitVec 32))
(declare-var n (BitVec 32))
(declare-var flag (BitVec 32))
(declare-var b! (BitVec 32))
(declare-var j! (BitVec 32))
(declare-var n! (BitVec 32))
(declare-var flag! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32)))Bool) 
(constraint (=> (and (= j (_ bv0 32)) (and (bvugt n (_ bv0 32)) (= b (_ bv0 32)) ) )(inv-f b j n flag )))
(constraint (=> (and (inv-f b j n flag ) (or (and (bvult b n) (and (= flag (_ bv1 32)) (and (= j! (bvadd j (_ bv1 32))) (and (= b! (bvadd b (_ bv1 32))) (and (= n! n) (= flag! flag) ) ) ) ) ) (or (and (bvult b n) (and (not (= flag (_ bv1 32))) (and (= j! j) (and (= b! (bvadd b (_ bv1 32))) (and (= n! n) (= flag! flag) ) ) ) ) ) (and (bvuge b n) (and (= j! j) (and (= b! b) (and (= n! n) (= flag! flag) ) ) ) ) ) ) )(inv-f b! j! n! flag! )))
(constraint (=> (inv-f b j n flag )(=> (not (bvult b n))(or (not (= flag (_ bv1 32))) (= j n) ))))
(check-synth)

