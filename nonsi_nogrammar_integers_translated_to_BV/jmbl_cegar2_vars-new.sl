(set-logic ALL)
(declare-var x (BitVec 32))
(declare-var n (BitVec 32))
(declare-var m (BitVec 32))
(declare-var z1 (BitVec 32))
(declare-var z2 (BitVec 32))
(declare-var z3 (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var n! (BitVec 32))
(declare-var m! (BitVec 32))
(declare-var z1! (BitVec 32))
(declare-var z2! (BitVec 32))
(declare-var z3! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32))(parameter4 (BitVec 32))(parameter5 (BitVec 32)))Bool) 
(constraint (=> (and (= x (_ bv1 32)) (= m (_ bv1 32)) )(inv-f x n m z1 z2 z3 )))
(constraint (=> (and (inv-f x n m z1 z2 z3 ) (or (and (and (and (bvult x n) (= x! (bvadd x (_ bv1 32))) ) (= n! n) ) (= m! m) ) (and (and (and (bvult x n) (= x! (bvadd x (_ bv1 32))) ) (= n! n) ) (= m! x) ) ) )(inv-f x! n! m! z1! z2! z3! )))
(constraint (=> (inv-f x n m z1 z2 z3 )(not (and (and (bvuge x n) (bvugt n (_ bv1 32)) ) (or (bvule n m) (bvult m (_ bv1 32)) ) ))))
(check-synth)

