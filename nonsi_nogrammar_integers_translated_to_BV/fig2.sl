(set-logic ALL)
(declare-var x (BitVec 32))
(declare-var y (BitVec 32))
(declare-var z (BitVec 32))
(declare-var w (BitVec 32))
(declare-var x! (BitVec 32))
(declare-var y! (BitVec 32))
(declare-var z! (BitVec 32))
(declare-var w! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32)))Bool) 
(constraint (=> (and (and (and (= x (_ bv0 32)) (= y (_ bv0 32)) ) (= z (_ bv0 32)) ) (= w (_ bv0 32)) )(inv-f x y z w )))
(constraint (=> (and (inv-f x y z w ) (or (or (and (and (and (= x! (bvadd x (_ bv1 32))) (= y! (bvadd y (_ bv2 32))) ) (= z! z) ) (= w! w) ) (and (and (and (and (bvuge x (_ bv4 32)) (= x! (bvadd x (_ bv1 32))) ) (= y! (bvadd y (_ bv3 32))) ) (= z! (bvadd z (_ bv10 32))) ) (= w! (bvadd w (_ bv10 32))) ) ) (and (and (and (and (and (bvuge x z) (bvugt w y) ) (= x! (bvsub (_ bv0 32) x)) ) (= y! (bvsub (_ bv0 32) y)) ) (= z! z) ) (= w! w) ) ) )(inv-f x! y! z! w! )))
(constraint (=> (inv-f x y z w )(bvuge (bvmul (_ bv3 32) x) y)))
(check-synth)

