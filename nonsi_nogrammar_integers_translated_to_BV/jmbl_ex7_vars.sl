(set-logic ALL)
(declare-var x (_ BitVec 32))
(declare-var y (_ BitVec 32))
(declare-var i (_ BitVec 32))
(declare-var z1 (_ BitVec 32))
(declare-var z2 (_ BitVec 32))
(declare-var z3 (_ BitVec 32))
(declare-var x! (_ BitVec 32))
(declare-var y! (_ BitVec 32))
(declare-var i! (_ BitVec 32))
(declare-var z1! (_ BitVec 32))
(declare-var z2! (_ BitVec 32))
(declare-var z3! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32)))Bool) 
(constraint (=> (and (and (and (= i (_ bv0 32)) (bvuge x (_ bv0 32)) ) (bvuge y (_ bv0 32)) ) (bvuge x y) )(inv-f x y i z1 z2 z3 )))
(constraint (=> (and (inv-f x y i z1 z2 z3 ) (and (and (bvult i y) (= i! (bvadd i (_ bv1 32))) ) (and (= y! y) (= x! x) ) ) )(inv-f x! y! i! z1! z2! z3! )))
(constraint (=> (inv-f x y i z1 z2 z3 )(not (and (bvult i y) (or (bvuge i x) (bvugt (_ bv0 32) i) ) ))))
(check-synth)

