(set-logic ALL)
(declare-var i (_ BitVec 32))
(declare-var i! (_ BitVec 32))
(declare-var n (_ BitVec 32))
(declare-var n! (_ BitVec 32))
(declare-var sn (_ BitVec 32))
(declare-var sn! (_ BitVec 32))
(declare-var i_0 (_ BitVec 32))
(declare-var i_0! (_ BitVec 32))
(declare-var i_1 (_ BitVec 32))
(declare-var i_1! (_ BitVec 32))
(declare-var i_2 (_ BitVec 32))
(declare-var i_2! (_ BitVec 32))
(declare-var i_3 (_ BitVec 32))
(declare-var i_3! (_ BitVec 32))
(declare-var n_0 (_ BitVec 32))
(declare-var n_0! (_ BitVec 32))
(declare-var sn_0 (_ BitVec 32))
(declare-var sn_0! (_ BitVec 32))
(declare-var sn_1 (_ BitVec 32))
(declare-var sn_1! (_ BitVec 32))
(declare-var sn_2 (_ BitVec 32))
(declare-var sn_2! (_ BitVec 32))
(declare-var sn_3 (_ BitVec 32))
(declare-var sn_3! (_ BitVec 32))
(synth-fun inv-f((parameter0 (_ BitVec 32))(parameter1 (_ BitVec 32))(parameter2 (_ BitVec 32))(parameter3 (_ BitVec 32))(parameter4 (_ BitVec 32))(parameter5 (_ BitVec 32))(parameter6 (_ BitVec 32))(parameter7 (_ BitVec 32))(parameter8 (_ BitVec 32))(parameter9 (_ BitVec 32))(parameter10 (_ BitVec 32))(parameter11 (_ BitVec 32)))Bool) 
(constraint (=> (and (and (and (= i i_1) (= sn sn_1) ) (= sn_1 (_ bv0 32)) ) (= i_1 (_ bv1 32)) )(inv-f i n sn i_0 i_1 i_2 i_3 n_0 sn_0 sn_1 sn_2 sn_3 )))
(constraint (=> (and (inv-f i n sn i_0 i_1 i_2 i_3 n_0 sn_0 sn_1 sn_2 sn_3 ) (or (and (and (and (and (and (and (= i_2 i) (= sn_2 sn) ) (= i_2 i!) ) (= sn_2 sn!) ) (= n n_0) ) (= n! n_0) ) (= sn sn!) ) (and (and (and (and (and (and (and (and (= i_2 i) (= sn_2 sn) ) (bvule i_2 n_0) ) (= i_3 (bvadd i_2 (_ bv1 32))) ) (= sn_3 (bvadd sn_2 (_ bv1 32))) ) (= i_3 i!) ) (= sn_3 sn!) ) (= n n_0) ) (= n! n_0) ) ) )(inv-f i! n! sn! i_0! i_1! i_2! i_3! n_0! sn_0! sn_1! sn_2! sn_3! )))
(constraint (=> (inv-f i n sn i_0 i_1 i_2 i_3 n_0 sn_0 sn_1 sn_2 sn_3 )(or (not (and (and (= i i_2) (= n n_0) ) (= sn sn_2) )) (not (and (and (not (bvule i_2 n_0)) (not (= sn_2 (_ bv0 32))) ) (not (= sn_2 n_0)) )) )))
(check-synth)

