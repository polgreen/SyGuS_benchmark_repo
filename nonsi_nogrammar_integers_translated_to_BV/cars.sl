(set-logic ALL)
(declare-var x1 (BitVec 32))
(declare-var x2 (BitVec 32))
(declare-var x3 (BitVec 32))
(declare-var v1 (BitVec 32))
(declare-var v2 (BitVec 32))
(declare-var v3 (BitVec 32))
(declare-var t (BitVec 32))
(declare-var RETURN (BitVec 32))
(declare-var x1! (BitVec 32))
(declare-var x2! (BitVec 32))
(declare-var x3! (BitVec 32))
(declare-var v1! (BitVec 32))
(declare-var v2! (BitVec 32))
(declare-var v3! (BitVec 32))
(declare-var t! (BitVec 32))
(declare-var RETURN! (BitVec 32))
(synth-fun inv-f((parameter0 (BitVec 32))(parameter1 (BitVec 32))(parameter2 (BitVec 32))(parameter3 (BitVec 32))(parameter4 (BitVec 32))(parameter5 (BitVec 32))(parameter6 (BitVec 32))(parameter7 (BitVec 32)))Bool) 
(constraint (=> (and (and (and (and (and (and (and (and (and (and (= RETURN (_ bv0 32)) (= x1 (_ bv100 32)) ) (= x2 (_ bv75 32)) ) (= x3 (bvsub (_ bv0 32) (_ bv50 32))) ) (bvuge v3 (_ bv0 32)) ) (bvule v1 (_ bv5 32)) ) (bvuge (bvsub v1 v3) (_ bv0 32)) ) (= (bvsub (bvsub (bvmul (_ bv2 32) v2) v1) v3) (_ bv0 32)) ) (= t (_ bv0 32)) ) (bvuge (bvadd v2 (_ bv5 32)) (_ bv0 32)) ) (bvule v2 (_ bv5 32)) )(inv-f x1 x2 x3 v1 v2 v3 t RETURN )))
(constraint (=> (and (inv-f x1 x2 x3 v1 v2 v3 t RETURN ) (and (and (and (= RETURN (_ bv0 32)) (or (and (not (bvuge (bvadd v2 (_ bv5 32)) (_ bv0 32))) (= RETURN! (_ bv1 32)) ) (and (bvuge (bvadd v2 (_ bv5 32)) (_ bv0 32)) (= RETURN! RETURN) ) ) ) (or (and (not (bvule v2 (_ bv5 32))) (= RETURN! (_ bv1 32)) ) (and (bvule v2 (_ bv5 32)) (= RETURN! RETURN) ) ) ) (or (and (and (and (and (and (and (and (or (and (not (bvuge (bvsub (bvsub (bvmul (_ bv2 32) x2) x1) x3) (_ bv0 32))) (= RETURN! (_ bv1 32)) ) (and (bvuge (bvsub (bvsub (bvmul (_ bv2 32) x2) x1) x3) (_ bv0 32)) (= RETURN! RETURN) ) ) (= x1! (bvadd x1 v1)) ) (= x3! (bvadd x3 v3)) ) (= x2! (bvadd x2 v2)) ) (= v2! (bvsub v2 (_ bv1 32))) ) (= v1! v1) ) (= v3! v3) ) (= t! (bvadd t (_ bv1 32))) ) (and (and (and (and (and (and (and (or (and (not (bvule (bvsub (bvsub (bvmul (_ bv2 32) x2) x1) x3) (_ bv0 32))) (= RETURN! (_ bv1 32)) ) (and (bvule (bvsub (bvsub (bvmul (_ bv2 32) x2) x1) x3) (_ bv0 32)) (= RETURN! RETURN) ) ) (= x1! (bvadd x1 v1)) ) (= x3! (bvadd x3 v3)) ) (= x2! (bvadd x2 v2)) ) (= v2! (bvadd v2 (_ bv1 32))) ) (= v1! v1) ) (= v3! v3) ) (= t! (bvadd t (_ bv1 32))) ) ) ) )(inv-f x1! x2! x3! v1! v2! v3! t! RETURN! )))
(constraint (=> (inv-f x1 x2 x3 v1 v2 v3 t RETURN )(=> (= RETURN (_ bv0 32))(and (and (and (and (and (and (and (and (bvule v1 (_ bv5 32)) (bvuge (bvadd (bvmul (_ bv2 32) v2) (bvmul (_ bv2 32) t)) (bvadd v1 v3)) ) (bvuge (bvadd (bvmul (_ bv5 32) t) (_ bv75 32)) x2) ) (bvule v2 (_ bv6 32)) ) (bvuge v3 (_ bv0 32)) ) (bvuge (bvadd v2 (_ bv6 32)) (_ bv0 32)) ) (bvuge (bvadd x2 (bvmul (_ bv5 32) t)) (_ bv75 32)) ) (bvuge (bvsub (bvadd (bvadd v1 v3) (bvmul (_ bv2 32) t)) (bvmul (_ bv2 32) v2)) (_ bv0 32)) ) (bvuge (bvsub v1 v3) (_ bv0 32)) ))))
(check-synth)

